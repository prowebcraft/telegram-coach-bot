<?php

use Prowebcraft\Telebot\Answer;
use Prowebcraft\Telebot\AnswerInline;

class CoachBot extends \Prowebcraft\Telebot\Telebot
{

    const DECISION_YES = 'yes';
    const DECISION_NO = 'no';
    const DECISION_MAYBE = 'maybe';

    public function startCommand()
    {
        if ($this->isChatGroup()) {
            $this->whoCommand();
        } else {
            $this->sendPhoto('AgADAgADxKgxG2LCMEinbDJ0CLbbq5IMMw4ABG3m4guYcA37YBQEAAEC', '–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —è –≤–∞—Å –±—ã—Å—Ç—Ä–æ –≤—Å–µ—Ö –ø–æ—Å—Ç—Ä–æ—é! üëä');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
     * @admin
     */
    public function openCommand()
    {
        $this->setChatConfig('mode', 'open');
        $this->reply('–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—Å–µ –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–∫–ª–∏—á–∫—É');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
     * @admin
     */
    public function closeCommand()
    {
        $this->setChatConfig('mode', 'close');
        $this->reply('–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–∫–ª–∏—á–∫—É –º–æ–≥—É—Ç –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã');
    }

    /**
     * –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∫–ª–∏—á–∫—É, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞—Ç—å –ø–æ–≤–æ–¥, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
     */
    public function whoCommand()
    {
        if (!$this->isChatGroup()) {
            $this->reply('–ü—Ä–æ–∫–æ–ø–µ–Ω–∫–æ, —Ç—ã —Å–≤–æ–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –≥–æ–ª–æ–≤–æ–π —Å–æ–≤—Å–µ–º –¥—É–º–∞—Ç—å —Ä–∞–∑—É—á–∏–ª—Å—è? –ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –≤–æ–∑–º–æ–∂–Ω–∞ üôà');
            return;
        }
        if ($this->getChatConfig('mode') != 'open' && !$this->isAdmin()) {
            $this->sendPhoto('AgADAgAD7agxG8jmMUjOFaxkpfygEIQHnA4ABGtOwd_TB95lK2cBAAEC',
                "–ê —Å–µ–≥–æ–¥–Ω—è –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –≤—Å–µ –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å. –í–µ—Ä–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–≥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ª–∏—à—å –≤—Å–µ, –º–∞–ª–æ –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å ‚òùÔ∏è\n"
                . "–ê —É–∂ –ø–µ—Ä–µ–∫–ª–∏—á–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å, —Ç–∞–∫ –ø–æ–¥–∞–≤–Ω–æ üòé"
            );
            return;
        }
        $reason = $this->getParams($this->e);
        $reply = $this->getRosterHeader($reason);
        $buttons = $this->getCallButtons();
        $post = $this->askInline($reply, $buttons, 'onCallReply');
        $this->setChatConfig('sessions.' . $post->getMessageId(), [
            'status' => 'open',
            'reason' => $reason,
            'starter' => $this->getUserId(),
            'users' => [],
            'time' => time()
        ]);
    }

    /**
     * @param AnswerInline $answer
     */
    public function onCallReply(AnswerInline $answer)
    {
        $sessionId = $answer->getCallbackQuery()->getMessage()->getMessageId();
        if (!($this->getSessionConfig($sessionId, 'status') == 'open')) {
            $answer->reply("–ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üí©", true);
            return;
        }
        $userId = $this->getUserId();

        //Mark user as active user (for later pokes)
        $members = $this->getChatConfig('members', []);
        $members[] = $userId;
        $members = array_unique($members);
        $this->setChatConfig('members', $members, false);

        $decision = $answer->getData();
        $this->addSessionConfig($sessionId, 'log', [
            'time' => date("Y-m-d H:i:s"),
            'user' => $this->getFromName(null, true),
            'answer' => $decision
        ]);
        switch ($decision) {
            case self::DECISION_YES:
            case self::DECISION_MAYBE:
            case self::DECISION_NO:
                $this->setSessionConfig($sessionId, "users.{$userId}", $decision);
                $answer->reply("üëå –ì–æ–ª–æ—Å —É—á—Ç–µ–Ω", false);
                break;
            case 'change_title':
                if ($this->canManage($sessionId)) {
                    $answer->reply('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω üëÆ');
                    return;
                }
                $ask = "<b>–ú–µ–Ω—è–µ–º –ø–æ–≤–µ—Å—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∏—á–∫–∏</b>";
                if ($reason = $this->getSessionConfig($sessionId, 'reason')) {
                    $ask .= sprintf("\n\n<b>–¢–µ–∫—É—â–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞</b>: %s", $reason);
                }
                $this->ask($ask, null, 'setTitleCallback', false, true, [
                    'id' => $sessionId
                ]);
                break;
            case 'poke':
                if ($this->canManage($sessionId)) {
                    $answer->reply('–≠—Ç–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω üëÆ');
                    return;
                }
                $members = $this->getChatConfig('members', []);
                $active = array_keys($this->getSessionConfig($sessionId, 'users', []));
                $left = array_diff($members, $active);
                $mention = [];
                foreach ($left as $leftUserId) {
                    $mention[] = sprintf('<a href="tg://user?id=%s">%s</a>', $leftUserId, $this->getUserName($leftUserId));
                }
                if (!empty($mention)) {
                    $message = implode(', ', $mention) .' - –ø—Ä–æ—Å—å–±–∞ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–∫–ª–∏—á–∫–µ';
                    $target = $this->getTarget();
                    if ($target) {
                        try {
                            $this->sendMessage($this->getChatId(), $message, 'HTML', true, $sessionId);
                        } catch (\TelegramBot\Api\Exception $e) {
                            $this->error('Error sending reply: %s', $e->getMessage());
                        }
                    }
                } else {
                    $answer->reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞');
                }
                break;
            case 'finish':
                if ($this->canManage($sessionId)) {
                    $answer->reply('–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫–ª–∏—á–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω üëÆ');
                    return;
                }
                $this->setSessionConfig($sessionId, 'status', 'closed');
                break;
        }

        $this->updateRosterMessage($sessionId);
    }
    
    /**
     * @param Answer $answer
     */
    public function setTitleCallback(Answer $answer)
    {
        $id = $answer->getExtraData('id');
        if ($id) {
            $this->setSessionConfig($id, 'reason', $answer->getReplyText());
            $this->updateRosterMessage($id);
            $this->reply('–ü–æ–≤–µ—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ - ' . $answer->getReplyText());
        } else {
            $this->error('Error updating title for session. Message Id: %s, Info: %s', $answer->getAskMessageId(), $answer->getInfo());
        }
    }

    /**
     * @param int $id
     * @param null|string $key
     * @param null|mixed $default
     * @return mixed
     */
    public function getSessionConfig($id, $key = null, $default = null)
    {
        if (!($session = $this->getChatConfig("sessions.$id")))
            return false;
        return \Prowebcraft\Dot::getValue($session, $key, $default);
    }

    /**
     * @param $id
     * @param $key
     * @param $value
     * @return $this
     */
    public function setSessionConfig($id, $key, $value)
    {
        $this->setChatConfig("sessions.$id.$key", $value);
        return $this;
    }

    /**
     * @param $id
     * @param $key
     * @param $value
     * @return $this
     */
    public function addSessionConfig($id, $key, $value)
    {
        $this->addChatConfig("sessions.$id.$key", $value);
        return $this;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    public function updateRosterMessage($id)
    {
        if (!$this->getSessionConfig($id)) {
            $this->reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∫–ª–∏—á–∫–µ');
            return;
        }

        $reply = $this->getRosterHeader($this->getSessionConfig($id, 'reason'));
        $reply .= "------------------------------------------------\n";
        $reply .= "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–∫–ª–∏—á–∫–∏</b>: \n ";
        $decisions = [
            self::DECISION_YES => [],
            self::DECISION_MAYBE => [],
            self::DECISION_NO => [],
        ];
        foreach ($this->getSessionConfig($id, 'users', []) as $userId => $decision) {
            $decisions[$decision][] = $userId;
        }
        foreach ([
            self::DECISION_YES => "üëç  –ë—É–¥—É—Ç",
            self::DECISION_NO => "üòî –ù–µ –±—É–¥—É—Ç",
            self::DECISION_MAYBE => "ü§∑‚Äç‚ôÇÔ∏è –ú–æ–∂–µ—Ç –±—ã—Ç—å",
         ] as $decision => $label) {
            $count = count($decisions[$decision]);
            if ($count) {
                $reply .= "<b>{$label}</b> ($count)\n";
                foreach ($decisions[$decision] as $user) {
                    $reply .= "  ‚òá " . $this->getUserName($user, $userId)."\n";
                }
            }

        }
        if (($this->getSessionConfig($id, 'status') == 'open')) {
            $buttons = $this->getCallButtons();
        } else {
            $reply .= "------------------------------------------------\n";
            $reply .= "–ü–µ—Ä–µ–∫–ª–∏—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üèÅ";
            $buttons = [];
        }

        try {
            $this->updateInlineMessage($id, $reply, $buttons);
        } catch (Exception $e) {
            $this->error("Error updating roster message - %s\nTrace: %s", $e->getMessage(), $e->getTraceAsString());
        }

    }

    /**
     * @param $reason
     * @return string
     */
    protected function getRosterHeader($reason)
    {
        $reply = "‚öΩÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ–∫–ª–∏—á–∫–∞!</b>\n";
        if (!empty($reason)) $reply .= "------------------------------------------------\nüìÜ <i>$reason</i>\n";
        return $reply;
    }

    /**
     * @return array
     */
    protected function getCallButtons()
    {
        $buttons = [];
        $buttons[] = [
            [
                'text' => "üëç  –ë—É–¥—É",
                'callback_data' => self::DECISION_YES
            ],
            [
                'text' => "üòî –ù–µ –±—É–¥—É",
                'callback_data' => self::DECISION_NO
            ],
            [
                'text' => "ü§∑‚Äç‚ôÇÔ∏è –ú–æ–∂–µ—Ç –±—ã—Ç—å",
                'callback_data' => self::DECISION_MAYBE
            ],
        ];
        $buttons[] = [
            [
                'text' => "üìã –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ—Å—Ç–∫—É",
                'callback_data' => 'change_title'
            ],
            [
                'text' => "üì£ –û–ø—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è",
                'callback_data' => 'poke'
            ],
            [
                'text' => "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫–ª–∏—á–∫—É",
                'callback_data' => 'finish'
            ]
        ];
        return $buttons;
    }

    /**
     * @param $sessionId
     * @return bool
     */
    protected function canManage($sessionId)
    {
        return $this->getSessionConfig($sessionId, 'starter') != $this->getUserId() && !$this->isAdmin();
    }

}
